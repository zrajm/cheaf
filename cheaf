#!/usr/bin/python3
"""Usage: cheaf [OPTION]... COMMAND [ARG...]

Cheaf (EAF chef) is a tool for processing ELAN annotation files.

Options:
  -h,--help           show help information about cheaf (-h only after COMMAND)
  -V,--version        show version information
  -C,--color=WHEN     colorize output: 'always'/'auto'/'never' (default: auto)
  -H,--with-filename  show filename for each
              Print the file name for each match.  This is  the  default  when
              there is more than one file to search.
  -h,--no-filename    suppress filename for each match
              Suppress  the  prefixing  of  file names on output.  This is the
              default when there is only one file (or only standard input)  to
              search.

Commands:
  annot TIER FILE...     show annotations in
  extract-video FILE...  *NYI
  help [COMMAND]         show help information about cheaf (or cheaf command)
  tiers FILE...          list tier names

FIXME:
  * add command for replacing media in .eaf file
  * add command for dumping .eaf as JSON
"""
__version__ = "0.0.12"
__copyright__ = "Copyright (C) 2019-2022 zrajm <zrajm@klingonska.org>"
__license__ = """GPLv2: GNU General Public License, version 2,
  <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>"""

import os
import string
import errno
import re
import sys

_exe = os.path.basename(__file__)
_info = """%s %s
%s
License %s.
This is free software: you are free to change and redistribute it.""" % (
    _exe,
    __version__,
    __copyright__,
    __license__,
)

# Import non-standard modules
try:
    from pympi import Elan
except ImportError:
    sys.exit("""%s: Missing module 'pympi'\n
    Install with: 'pip3 install pympi-ling'\n""" % _exe)
try:
    from docopt import docopt, DocoptExit
except ImportError:
    sys.exit("""%s: Missing module 'docopt'\n
    Install with: 'pip3 install docopt'\n""" % _exe)

################################################################################
##                                                                            ##
##  Helper Functions                                                          ##
##                                                                            ##
################################################################################

# Open eaf file or die.
def open_eaf(filename):
    try:
        # Temporarily swap STDOUT <=> STDERR because pympi Elan module have a
        # nasty habit of outputting error messages on STDOUT. :(
        sys.stdout, sys.stderr = sys.stderr, sys.stdout
        eaf = Elan.Eaf(filename)
        sys.stdout, sys.stderr = sys.stderr, sys.stdout
        return eaf
    except OSError as e:
        raise CheafError(
            "Can't open EAF file, %s: '%s'" % (e.args[1], e.filename),
            tips=False,
        )

################################################################################
##                                                                            ##
##  Sub-Command Functions                                                     ##
##                                                                            ##
################################################################################

def cmd_help(args):
    """Usage: cheaf help [COMMAND]

    Show help information about the given cheaf COMMAND (or general information
    about cheaf, if no command was specified).

    Options --help or -h also invoke this command. Though, if the short form
    (-h) is used before COMMAND then it acts as the --no-filename option. The
    long form (--help) may appear anywhere on the command line. (If a command
    fail on you, you may always re-execute the command with an added -h at the
    end to check the help info for the cheaf command you ran. -- When a help
    option is used, all other options, except for the first given COMMAND are
    intentionally ignored.)

    """
    cmd = args["COMMAND"]
    try:
        doc = get_command_func(cmd).__doc__ if cmd else __doc__
    except CheafError as e:    # modify and re-raise error
        e.msg += ", no help found"
        e.tips = False
        raise e
    import inspect
    print(inspect.cleandoc(doc))

# WORKING?
def cmd_annot(args):
    """Usage: cheaf annot [OPTION]... [--] FILE...

    Options:
      -t,--tier=REGEX   only output annotations in tiers with matching name

    Output matching annotations in FILE(s). Output values are tab separated,
    and each line include start time, end time, tier name and the annotation
    value. (Time is output in H:MM:SS.DDD format.)

    Global option --with-filename will prepend each line with filename (also
    tab separated), and if --color is in use then matching strings will be
    highlighted in the output.

    No distinction is made between the EAF format's <ALIGNABLE_ANNOTATION> and
    <REF_ANNOTATION> â€“ They are both included in the output, formatted in the
    same way. (I have yet to find a situation where distinguishing the two is
    relevant.)

    TODO: TIER should support regex pattern.

    """
    filenames = args["FILE"]
    print_tty("%s\t%s\t%s" % ("BEGIN", "END", "VALUE"))
    for filename in filenames:
        eaf = open_eaf(filename)
        tiers = eaf.tiers

        regex = None
        if args["--tier"] != None:
            regex = re.compile('(%s)' % args["--tier"])
            tiers = filter(regex.match, eaf.tiers)

        for tiername in tiers:
            tiername_out = tiername
            if args["color"] and regex != None:
                tiername_out = regex.sub('\x1B[7m\\1\x1B[m', tiername)

            for annot in eaf.get_annotation_data_for_tier(tiername):
                try:                            # <ALIGNABLE_ANNOTATION>
                    begin_ms, end_ms, value           = annot
                except ValueError as e:         # <REF_ANNOTATION>
                    begin_ms, end_ms, value, referent = annot

                begin_ms = stringify_ms(begin_ms)
                end_ms   = stringify_ms(end_ms)
                if args["show_filenames"]:
                    print("%s\t%s\t%s\t%s\t%s" % (filename, begin_ms, end_ms, tiername_out, value))
                else:
                    print("%s\t%s\t%s\t%s"     % (          begin_ms, end_ms, tiername_out, value))

# WORKING?
def cmd_extract_video(args):
    """Usage: cheaf extract-video TIER FILE... OUTDIR

    TODO: NOT YET IMPLEMENTED

    Extract video snippets corresponding to each of the annotations in the
    given TIER in each of the FILE(s). Output is written to OUTDIR (which is
    created if it does not already exist).

    Options:
      -?,--help  display this help and exit

    """
    filenames, tiername = args["FILE"], args["TIER"]
    for filename in filenames:
        eaf = Elan.Eaf(filename)
        tiers = eaf.tiers
        media = eaf.get_linked_files()
        print("MEDIA")
        print(media)
        print(media[0]['MEDIA_URL'])
        count = {}
        if tiername not in tiers:
            warn("Tier '%s' not found" % tiername)
        else:
            for anno in eaf.get_annotation_data_for_tier(tiername):
                (beg, end, gloss) = anno
                count[gloss] = 1 if gloss not in count else count[gloss] + 1
                outfile = "%s-%05d.mp4" % (gloss.lower(), count[gloss])
                duration = end-beg
                print("""----------------
GLOSS: %s
OUTNAME: %s
FILE: %s
TIER: %s
BEG: %ss\t%sms
DUR: %ss\t%sms
ffmpeg -ss %.10g -i %s -c copy -t %.10g %s""" % (
    gloss,
    outfile,
    filename,
    tiername,
    beg/1000, beg,
    duration/1000, duration,
    beg/1000, filename, duration/1000, outfile
    # The timestamps need to be in HH:MM:SS.xxx format or in seconds (s.msec)
    #ffmpeg -ss START -i FILE -c copy -t DURATION output.wmv
))

# WORKS
def cmd_tiers(args):
    """Usage: cheaf tiers [--] FILE...

    List names of all tiers in specified FILE(s).

    """
    for filename in args["FILE"]:
        eaf = open_eaf(filename)
        tiers = eaf.tiers
        for tiername in tiers.keys():
            if args["show_filenames"]:
                print("%s: %s" % (filename, tiername))
            else:
                print("%s" % tiername)

################################################################################

def print_tty(args):
    if sys.stdout.isatty():
        print(args)

def warn(msg, *args):
    binname = os.path.basename(__file__)
    print("%s: %s" % (binname, msg), *args, file=sys.stderr)

def read_elan_file(filename):
    eaf = Elan.Eaf(filename)

def get_command_func(command):
    try:
        return globals()["cmd_" + re.sub("-", "_", command)]
    except:
        raise CheafError("'%s' is not a cheaf command" % command)

# Split argv into global option + subcommand and subcommand + command options.
def split_args(args):
    i = 0
    for arg in args:
        if arg[:1] != '-': break
        i += 1
    return args[:i+1], args[i:]

def stringify_ms(ms):
    """Convert EAF milliseconds to [H:]MM:SS.DDD[DDD] format. (Hours are left out
    if zero, same with any decimals except the first three.)

    Make sure there are exactly three decimals (if possible). Prettifies output
    by giving all timestamps the same length. This is done by grabbing leading
    non-zero decimals, then zero-padding to three places. Needed because EAF
    files only have millisecond precision (i.e. to three decimal places), but
    Python 'datetime' return either six or zero decimals. This only ever strip
    off trailing *zeroes*, so, if there are more than three non-zero decimals
    (or if the hour is non-zero) then returned values will have variable
    length.

    """
    import datetime
    timestr = str(datetime.timedelta(seconds = ms / 1000))
    timestr = re.sub(r'^0+:', '', timestr, 1)  # strip hours (if zero)
    return re.sub(                             # prefer 3 decimal places
        r'(?:([.][0-9]+?)0*)?$',
        lambda m: (m.group(1) if m.group(0) else '.').ljust(4, '0'),
        timestr,
        1,
    )

# Return name of the command for which help was requested, or None if no
# '--help', '-h' option or 'help' command was found. '-h' may only occur after
# a command (if it comes before it's an alias for the global option
# '--no-filename'). Command line scanning stops if '--' is encountered.

# 'help' (first command)
#   cheaf help       -> help (no cmd)
#   cheaf -h help    -> help (no cmd)
#   cheaf help annot -> help 'annot'
#   cheaf annot help -> no help (invokes 'annot' with arg 'help')
#
# '-h' (must come after command)
#   cheaf -h         -> help (no cmd)
#   cheaf help -h    -> help 'help'
#   cheaf annot -h   -> help 'annot'
#   cheaf -h annot   -> no help (invokes 'annot')
#
# '--help' (anywhere on command line)
#   cheaf --help        -> help (no cmd)
#   cheaf --help annot  -> help 'annot'
#   cheaf annot --help  -> help 'annot'
#
def get_help_option(argv):
    lopt  = False  # '--help' found
    shopt = False  # '-h' found (nulled if command is found)
    cmds = []      # commands found
    for arg in argv[1:]:
        if arg == '--': break
        elif arg[:1] != '-':
            cmds.append(arg)
            if lopt: return (True, cmds[0])
            shopt = False
        elif arg == '-h':
            if cmds: return (True, cmds[0])
            shopt = True
        elif arg == '--help':
            if cmds: return (True, cmds[0])
            lopt = True
    if shopt or lopt:         # '--help' or '-h'
        return (True, None)
    try:                      # 'help'
        if cmds[0] == 'help':
            try   : return (True, cmds[1])  # w/  arg
            except: return (True, None)     # w/o arg
    except: pass
    return (False, None)

def mydocopt(argv, func = None, version = None):
    """Wrapper for docopt function (to make it behave a bit nicer)."""
    doc = func.__doc__ if func else __doc__
    doc = doc.replace('[OPTION]...', '[options]')
    doc = re.sub(r'.*--help.*\n', '', doc)
    doc = re.sub(r"\((default:[^)]*)\)", r"[\1]", doc)
    return docopt(doc, argv, help=False, version=version)

################################################################################
##                                                                            ##
##  Main                                                                      ##
##                                                                            ##
################################################################################

def main():
    # Split into pre- and post-command arguments.
    global_argv, cmd_argv = split_args(sys.argv[1:])

    helpopt, helpcmd = get_help_option(sys.argv)
    if helpopt:                                  # help option/command used?
        args = { 'COMMAND':  helpcmd }
        cmdfunc = get_command_func('help')
        cmdfunc(args)                            # call subcommand function
        sys.exit()

    # Parse global options.
    try: args = mydocopt(global_argv, version=_info)
    except DocoptExit as e:
        if not global_argv or global_argv[-1][0] == "-":
            raise CheafError("Missing cheaf command")
        else:
            raise CheafError("Unknown arguments")

    # Get subcommand function.
    del args["ARG"]                            # always empty
    cmd_name = args.pop("COMMAND")             # always the command name
    cmdfunc = get_command_func(cmd_name)

    # Parse subcommand options.
    try: subargs = mydocopt(cmd_argv, func=cmdfunc)
    except DocoptExit as e:
        raise CheafError("Unknown arguments for command '%s'" % cmd_name, cmd_name)
    del subargs[cmd_name]                      # always the command name
    args.update(subargs)

    if "FILE" in args:
        args["show_filenames"] = True if len(args["FILE"]) > 1 else False
        if args["--no-filename"]: args["show_filenames"] = False
        if args["--with-filename"]: args["show_filenames"] = True
        del args["--no-filename"], args["--with-filename"]

    # set 'color' (from '--color' option or default value)
    if args["--color"] in ("always", "yes", "force"):
        args["color"] = True
    elif args["--color"] in ("never", "no", "none"):
        args["color"] = False
    elif args["--color"] in ("auto", "tty", "if-tty"):
        args["color"] = True if sys.stdout.isatty() else False;
    else:
        raise CheafError('\n'.join([
            "Unknown argument '%s' for '--color'"  % args["--color"],
            "Available arguments are:",
            "  - 'always', 'yes', 'force'",
            "  - 'never', 'no', 'none'",
            "  - 'auto', 'tty', 'if-tty'"
        ]), tips=False)

    # Call subcommand function.
    cmdfunc(args)
    sys.exit()

class CheafError(Exception):
    def __init__(self, msg, subcmd = '', tips = True):
        self.msg = msg
        self.subcmd = subcmd
        self.tips = tips
    def __str__(self):
        msg = [self.msg]
        if self.tips:
            msg[-1] += '.'
            msg.append("See 'cheaf")
            if self.subcmd: msg.append(self.subcmd)
            msg.append("--help'.")
        return ' '.join(msg)

if __name__ == '__main__':
    try: main()
    except CheafError as e:
        sys.exit("%s: %s" % (_exe, e))
    except ConnectionError:
        sys.exit()
    except KeyboardInterrupt:
        sys.exit('***BREAK keyboard interrupt')

#[eof]
